<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dynamic Page with Sort and Pagination</title>
  <style>
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }

    th, td {
      border: 1px solid #ddd;
      padding: 8px;
      text-align: left;
    }
  </style>
</head>
<body>
  <div id="app"></div>

  <script>
    // Model: data fetching logic
    const fetchData = async () => {
      const response = await fetch('/assets/data.json'); // Assuming data.json is in the public/assets directory
      const data = await response.json();
      return data;
    };

    // View: table component
    const tableView = (data) => {
      const table = document.createElement('table');
      const thead = document.createElement('thead');
      const tbody = document.createElement('tbody');

      const headerRow = document.createElement('tr');
      Object.keys(data[0]).forEach((column) => {
        const th = document.createElement('th');
        th.textContent = column;
        headerRow.appendChild(th);
      });
      thead.appendChild(headerRow);

      data.forEach((item) => {
        const row = document.createElement('tr');
        Object.values(item).forEach((value) => {
          const td = document.createElement('td');
          td.textContent = value;
          row.appendChild(td);
        });
        tbody.appendChild(row);
      });

      table.appendChild(thead);
      table.appendChild(tbody);

      return table;
    };

    // Controller: main app logic
    const app = async () => {
      const data = await fetchData();
      const appElement = document.getElementById('app');

      // Sort logic (customize based on your requirements)
      const sortData = (columnName) => {
        data.sort((a, b) => a[columnName].localeCompare(b[columnName]));
        render();
      };

      // Pagination logic
      const itemsPerPage = 10;
      let currentPage = 1;

      const paginate = (pageNumber) => {
        currentPage = pageNumber;
        render();
      };

      const render = () => {
        const startIndex = (currentPage - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;
        const slicedData = data.slice(startIndex, endIndex);

        appElement.innerHTML = '';
        appElement.appendChild(tableView(slicedData));

        // Add Sort and Pagination controls with event listeners
        const sortButton = document.createElement('button');
        sortButton.textContent = 'Sort by Column1';
        sortButton.addEventListener('click', () => sortData('Column1'));
        appElement.appendChild(sortButton);

        const paginationContainer = document.createElement('div');
        for (let i = 1; i <= Math.ceil(data.length / itemsPerPage); i++) {
          const pageNumberButton = document.createElement('button');
          pageNumberButton.textContent = i;
          pageNumberButton.addEventListener('click', () => paginate(i));
          paginationContainer.appendChild(pageNumberButton);
        }
        appElement.appendChild(paginationContainer);
      };

      render();
    };

    app();
  </script>
</body>
</html>
